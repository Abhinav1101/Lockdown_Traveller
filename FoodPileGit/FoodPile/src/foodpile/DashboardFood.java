/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package foodpile;

import com.orsoncharts.label.StandardCategoryItemLabelGenerator;
import com.orsoncharts.util.TextAnchor;
import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import static foodpile.JdbcConnection.classForName;
import static foodpile.JdbcConnection.getConnection;
import static foodpile.JdbcConnection.password;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.*;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.sql.rowset.CachedRowSet;
import static foodpile.JdbcConnection.username;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.*;
import org.jfree.chart.*;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.*;

/**
 *
 * @author iayus
 */
public class DashboardFood extends javax.swing.JFrame {

    /**
     * Creates new form Dashboarduser
     */
    Set<String> st=new TreeSet<String>();
    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    SimpleDateFormat formatter2 = new SimpleDateFormat("dd-MM-yyyy HH-mm-ss");
    Date date = new Date();
        
    public DashboardFood() {
        initComponents();
        jLabel1.setText("Welcome  " + Login.loggedInUser + "");
        Toolkit toolkit = getToolkit();
        Dimension dim = toolkit.getScreenSize();
        setLocation(dim.width / 2 - getWidth() / 2, dim.height / 2 - getHeight() / 2);
        st.add("mobile");
        st.add("maggie");
        st.add("dragon fruit");
        checkshort();

    }
    
    
    void checkshort()
    {
        try{
            /*
            Class.forName(classForName);
            Connection con = DriverManager.getConnection(getConnection,username,password);
            PreparedStatement ps=con.prepareStatement("Select * from foodInventory where Username=?");
            ps.setString(1, Login.loggedInUser);
            ResultSet result=ps.executeQuery();
            */
            Socket s = new Socket("localhost",6666);
            DataOutputStream dout = new DataOutputStream(s.getOutputStream());

            dout.writeUTF("populateTable");
            dout.writeUTF(Login.loggedInUser);
            dout.writeUTF("item_id");
            dout.writeUTF("null");
            dout.flush();


            ObjectInputStream oin = new ObjectInputStream(s.getInputStream());
            CachedRowSet result = (CachedRowSet) oin.readObject();
            dout.close();
            s.close();
            
           
            String str="\n\n";
            while(result.next())
            {
                int quantity = result.getInt("item_quantity");
                
                int threshold = result.getInt("threshold");
                if(threshold>=quantity)
                {   
                    notify.setText("Hey, some items are running short.");
                
                }
            } 
        }
        catch(Exception e) 
        {
            JOptionPane.showMessageDialog(this,e);
        }
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        button_logout = new javax.swing.JButton();
        button_advanced_search = new javax.swing.JButton();
        button_notify = new javax.swing.JButton();
        notify = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        add_item = new javax.swing.JButton();
        update_item = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_inventory = new javax.swing.JTable();
        button_show_details = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        button_search_info = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tf_search_by = new javax.swing.JTextField();
        combo_box_search = new javax.swing.JComboBox<>();
        button_graph = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        combo_box_apply_filter = new javax.swing.JComboBox<>();
        remove_item1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 204, 51));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Welcome ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 450, 50));

        button_logout.setText("Logout");
        button_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_logoutActionPerformed(evt);
            }
        });
        jPanel1.add(button_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 90, -1));

        button_advanced_search.setText("Advanced Search");
        button_advanced_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_advanced_searchActionPerformed(evt);
            }
        });
        jPanel1.add(button_advanced_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 10, 150, 30));

        button_notify.setText("Notifications");
        button_notify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_notifyActionPerformed(evt);
            }
        });
        jPanel1.add(button_notify, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 10, 120, 30));

        notify.setBackground(new java.awt.Color(255, 204, 51));
        notify.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 18)); // NOI18N
        notify.setForeground(new java.awt.Color(255, 0, 0));
        jPanel1.add(notify, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 80, 520, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 140));

        jPanel2.setBackground(new java.awt.Color(255, 153, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        add_item.setText("Add food Items");
        add_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_itemActionPerformed(evt);
            }
        });
        jPanel2.add(add_item, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 170, 30));

        update_item.setText("Update food items");
        update_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_itemActionPerformed(evt);
            }
        });
        jPanel2.add(update_item, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 170, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Inventory Details");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 330, 40));

        table_inventory.setBackground(new java.awt.Color(255, 255, 204));
        table_inventory.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        table_inventory.setForeground(new java.awt.Color(0, 0, 0));
        table_inventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Id", "Category", "Name", "Available Quantity", "Price oer unit", "Threshold"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_inventory);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, 1200, 370));

        button_show_details.setText("Show");
        button_show_details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_show_detailsActionPerformed(evt);
            }
        });
        jPanel2.add(button_show_details, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 110, 80, 30));

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        button_search_info.setBackground(new java.awt.Color(153, 153, 153));
        button_search_info.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        button_search_info.setForeground(new java.awt.Color(0, 0, 0));
        button_search_info.setText("Search");
        button_search_info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_search_infoActionPerformed(evt);
            }
        });
        jPanel4.add(button_search_info, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 110, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Get Storage Info");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, -1, -1));

        tf_search_by.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_search_byKeyReleased(evt);
            }
        });
        jPanel4.add(tf_search_by, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 130, 30));

        combo_box_search.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        combo_box_search.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Product Name", "Product Category" }));
        jPanel4.add(combo_box_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 160, 30));

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 10, 310, 200));

        button_graph.setText("Graphical Representation");
        button_graph.setMaximumSize(new java.awt.Dimension(119, 29));
        button_graph.setMinimumSize(new java.awt.Dimension(119, 29));
        button_graph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_graphActionPerformed(evt);
            }
        });
        jPanel2.add(button_graph, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, 190, 30));

        jLabel4.setFont(new java.awt.Font("Gabriola", 1, 27)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Apply Filters");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 105, 120, 30));

        combo_box_apply_filter.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        combo_box_apply_filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort by Quantity", "Sort by Price" }));
        jPanel2.add(combo_box_apply_filter, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 150, 40));

        remove_item1.setText("Remove items");
        remove_item1.setMaximumSize(new java.awt.Dimension(119, 29));
        remove_item1.setMinimumSize(new java.awt.Dimension(119, 29));
        remove_item1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_item1ActionPerformed(evt);
            }
        });
        jPanel2.add(remove_item1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 170, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 1290, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_show_detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_show_detailsActionPerformed
        // TODO add your handling code here: 
        Connection con = null;
        ResultSet rs = null;
        DefaultTableModel model = (DefaultTableModel) table_inventory.getModel();
        model.setRowCount(0);
        String sort_order = (String) combo_box_apply_filter.getSelectedItem();

        try {
/*
            Class.forName(classForName);
            con = DriverManager.getConnection(getConnection, username, password);
            String query = "";
            if (sort_order.equals("Sort by Quantity")) {
                query = "SELECT * FROM foodInventory WHERE username=? ORDER By item_quantity";
            } else {
                query = "SELECT * FROM foodInventory WHERE username=? ORDER By item_price";
            }

            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, Login.loggedInUser);
            */
            Socket s = new Socket("localhost",6666);
            DataOutputStream dout = new DataOutputStream(s.getOutputStream());

            dout.writeUTF("populateTable");
            dout.writeUTF(Login.loggedInUser);
            dout.writeUTF(sort_order);
            dout.writeUTF("null");
            dout.flush();


            ObjectInputStream oin = new ObjectInputStream(s.getInputStream());
            CachedRowSet result = (CachedRowSet) oin.readObject();
            dout.close();
            s.close();
           
            while (result.next()) {
                int item_id = result.getInt("item_id");
                String category = result.getString("item_category");
                String name = result.getString("item_name");
                int quantity = result.getInt("item_quantity");
                int price = result.getInt("item_price");
                int threshold = result.getInt("threshold");

                model.addRow(new Object[]{item_id, category, name, quantity, price,threshold});

            }
            
        } catch (Exception e) {
            System.out.println(e);

        }


    }//GEN-LAST:event_button_show_detailsActionPerformed

    private void button_search_infoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_search_infoActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table_inventory.getModel();
        model.setRowCount(0);
        String search_order = (String) combo_box_search.getSelectedItem();
        /*
        Connection con = null;
        ResultSet rs = null;*/
        String detail = tf_search_by.getText();

        if (detail.equals("")) {
            JOptionPane.showMessageDialog(this, "Please provide the correct detail.");
        } else {
            try {
                /*
                Class.forName(classForName);
                con = DriverManager.getConnection(getConnection, username, password);
                String query = "";
                if (search_order.equals("Product Name")) {
                    query = "SELECT * FROM foodInventory WHERE username=? AND item_name=?";
                } else {
                    query = "SELECT * FROM foodInventory WHERE username=? AND item_category=?";
                }

                PreparedStatement pst = con.prepareStatement(query);

                pst.setString(1, Login.loggedInUser);
                pst.setString(2, detail);
                */
                
                Socket s = new Socket("localhost",6666);
                DataOutputStream dout = new DataOutputStream(s.getOutputStream());

                dout.writeUTF("searchItem");
                dout.writeUTF(Login.loggedInUser);
                dout.writeUTF(search_order);
                dout.writeUTF(detail);
                dout.writeUTF("null");
                dout.flush();


                ObjectInputStream oin = new ObjectInputStream(s.getInputStream());
                CachedRowSet result = (CachedRowSet) oin.readObject();
                dout.close();
                s.close();
                
                
                int flag=-1;
                
                while (result.next()) {

                    int item_id = result.getInt("item_id");
                    String category = result.getString("item_category");
                    String name = result.getString("item_name");
                    int quantity = result.getInt("item_quantity");
                    int price = result.getInt("item_price");
                    int threshold = result.getInt("threshold");
                    model.addRow(new Object[]{item_id, category, name, quantity, price,threshold});
                    flag=0;
                }
                if(flag!=0)
                {
                    JOptionPane.showMessageDialog(this, "No such item exists in your inventory.");
        
                }
                else{
                    st.add(detail);
                }
                
            } catch (Exception e) {
                System.out.println(e);

            }
        }

    }//GEN-LAST:event_button_search_infoActionPerformed

    private void add_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_itemActionPerformed
        // TODO add your handling code here:
        FoodItemsAdd obj = new FoodItemsAdd();
        obj.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_add_itemActionPerformed

    private void button_graphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_graphActionPerformed
        // TODO add your handling code here:
//        FoodItemsRemove obj = new FoodItemsRemove();
//        obj.setVisible(true);
//        dispose();

        Connection con = null;
        try {
            String query = "select item_name,item_quantity from foodinventory WHERE username = '" + Login.loggedInUser + " '";
            Class.forName(classForName);
            con = DriverManager.getConnection(getConnection, username, password);
            JDBCCategoryDataset dataset = new JDBCCategoryDataset(con, query);
            JFreeChart chart = ChartFactory.createBarChart3D("Quantity Chart", "Name", "Quantity", dataset, PlotOrientation.VERTICAL, false, true, true);
            Font font = new Font("Times New Roman", Font.BOLD, 25);
            final CategoryPlot plot = chart.getCategoryPlot();
            BarRenderer renderer = (BarRenderer) plot.getRenderer();
            DecimalFormat format = new DecimalFormat("##.#");
            renderer.setItemLabelGenerator(new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("{2}", format));
            plot.setRenderer(renderer);
            renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12, org.jfree.ui.TextAnchor.HALF_ASCENT_CENTER));
            renderer.setBaseItemLabelFont(font);
            renderer.setItemLabelsVisible(true);
            ChartFrame frame = new ChartFrame("Query Chart", chart);
            frame.setTitle("Chart for " + formatter.format(date));

            plot.getDomainAxis().setLabelFont(font);
            plot.getRangeAxis().setLabelFont(font);
            chart.getCategoryPlot().setRenderer(renderer);
            String file_name = "Quantity_Chart " + formatter2.format(date) + ".jpeg";
            File barChart3D = new File(file_name);
            ChartUtilities.saveChartAsJPEG(barChart3D, chart, 900, 650);
            frame.setVisible(true);
            frame.setSize(900, 650);

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_button_graphActionPerformed

    private void update_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_itemActionPerformed
        // TODO add your handling code here:
        FoodItemsUpdate obj = new FoodItemsUpdate();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_update_itemActionPerformed

    private void tf_search_byKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_search_byKeyReleased
        // TODO add your handling code here:
        
       
        
        
        if(evt.getKeyCode()==KeyEvent.VK_BACK_SPACE||evt.getKeyCode()==KeyEvent.VK_DELETE)
        {
           
        }
        else
        {   
            String to_check=tf_search_by.getText();
            to_check = to_check.toLowerCase();
            int to_check_len=to_check.length();
            for(String data:st)
            {
                String check_from_data="";
                for(int i=0;i<to_check_len;i++)
                {
                    if(to_check_len<=data.length())
                    {
                        check_from_data = check_from_data+data.charAt(i);
                    }
                }
                //System.out.print(check_from_data);
                if(check_from_data.equals(to_check))
                {
                    //System.out.print("Found");
                    tf_search_by.setText(data);
                    tf_search_by.setSelectionStart(to_check_len);
                    tf_search_by.setSelectionEnd(data.length());
                    break;
                }
            }
        }
    }//GEN-LAST:event_tf_search_byKeyReleased

    private void remove_item1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_item1ActionPerformed
        // TODO add your handling code here:
        FoodItemsRemove obj = new FoodItemsRemove();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_remove_item1ActionPerformed

    private void button_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_logoutActionPerformed
        // TODO add your handling code here:
        int answer = JOptionPane.showConfirmDialog(null, "Do you want to Logout?");

        if (answer == JOptionPane.YES_OPTION) {
            Login.loggedInUser = "";
            this.dispose();
            Login obj = new Login();
            obj.setVisible(true);
        }
    }//GEN-LAST:event_button_logoutActionPerformed

    private void button_advanced_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_advanced_searchActionPerformed
        // TODO add your handling code here:
        Search search = new Search();
        search.setVisible(true);
        dispose();
    }//GEN-LAST:event_button_advanced_searchActionPerformed

    private void button_notifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_notifyActionPerformed
        // TODO add your handling code here:
        Notify obj = new Notify();
        obj.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_button_notifyActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_item;
    private javax.swing.JButton button_advanced_search;
    private javax.swing.JButton button_graph;
    private javax.swing.JButton button_logout;
    private javax.swing.JButton button_notify;
    private javax.swing.JButton button_search_info;
    private javax.swing.JButton button_show_details;
    private javax.swing.JComboBox<String> combo_box_apply_filter;
    private javax.swing.JComboBox<String> combo_box_search;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel notify;
    private javax.swing.JButton remove_item1;
    private javax.swing.JTable table_inventory;
    private javax.swing.JTextField tf_search_by;
    private javax.swing.JButton update_item;
    // End of variables declaration//GEN-END:variables
}
